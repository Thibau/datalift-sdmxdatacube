define([
  'jquery',
  'knockout',
  'validation',
  'config/rules',
  'models/SourceTransporter'
], function($, ko, validation, rules, SourceTransporter){
  'use strict';

  /**
   * A Source is a dataset which comes either from a file, DB, endpoint.
   * Here it is mostly a not-yet-created DataCube source which
   * comes from a SDMX (XML) parent.
   * All of its properties are KO observables except parent.
   * @param {Object} parent     POJO with properties title and uri.
   * @param {Object} project    Which project is the source attached to. Properties title and uri.
   * @param {String} title      Label of the source. Unique. Generated by default.
   * @param {String} uri        URI to identify the source and its graph. Unique.
   * @param {String} uriPattern A pattern to be used by the URIs inside the source.
   * @param {String} creator    Who created the source.
   * @param {Date} created      When this source was created.
   */
  var Source = function(parent, project, title, uri, uriPattern, creator, created) {
    var self = this;

    // Parent is a JS object with properties title and uri.
    self.parent     = parent;
    // Project is also a JS object with properties title and uri.
    self.project    = project;
    self.title      = ko.observable(title).extend(rules.source.title);
    // self.title.extend({
    //   remote : {
    //     onlyIf : function() {return self.title.isModified();},
    //     params : {
    //       beforeSend : function(jqxhr, settings) {
    //         var parameterString = '';
    //         // Here, settings.data is already 'application/x-www-form-urlencoded'
    //         // Thus we need to append our URL encoded values to the string.
    //         $.each(new SourceTransporter(ko.toJS(self), true), function(key, val) {
    //           parameterString += '&' + key + '=' + encodeURIComponent(val);
    //         });
    //         settings.data = parameterString.substring(1);
    //         // If not explicitely overriden here, content-type will be set to text/plain.
    //         jqxhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded; charset=UTF-8');
    //       }
    //     }
    //   }
    // });
    self.uri        = ko.observable(uri).extend(rules.source.uri);
    self.uriPattern = ko.observable(uriPattern).extend(rules.source.uriPattern);
    self.creator    = ko.observable(creator);
    self.created    = ko.observable(created);
  };

  return Source;
});
